// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\infrastructure\store\store.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/ningzining/cotton-pavilion/internal/domain/repository"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockFactory) AutoMigrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutoMigrate")
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockFactoryMockRecorder) AutoMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockFactory)(nil).AutoMigrate))
}

// Clean mocks base method.
func (m *MockFactory) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockFactoryMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockFactory)(nil).Clean))
}

// ImageRepository mocks base method.
func (m *MockFactory) ImageRepository() repository.ImageRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRepository")
	ret0, _ := ret[0].(repository.ImageRepository)
	return ret0
}

// ImageRepository indicates an expected call of ImageRepository.
func (mr *MockFactoryMockRecorder) ImageRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRepository", reflect.TypeOf((*MockFactory)(nil).ImageRepository))
}

// UserRepository mocks base method.
func (m *MockFactory) UserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockFactoryMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockFactory)(nil).UserRepository))
}
